import streamlit as st
import pandas as pd
import plotly.express as px
from data_connector import get_mock_feature_store_data, get_mock_prediction

# --- Configura√ß√£o da P√°gina ---
st.set_page_config(
    page_title="Dashboard de Manuten√ß√£o Preditiva",
    page_icon="üîß",
    layout="wide"
)

# --- Fun√ß√µes com Cache ---
@st.cache_data(ttl=60) # Armazena o resultado por 60 segundos para evitar buscas repetidas
def load_data():
    """
    Carrega os dados da feature store (usando a fun√ß√£o mock).
    O decorador @st.cache_data garante que n√£o recarregamos os dados a cada intera√ß√£o.
    """
    return get_mock_feature_store_data()

# --- T√≠tulo e Atualiza√ß√£o ---
st.title("üîß Dashboard de Manuten√ß√£o Preditiva")

if st.button("üîÑ Atualizar Dados"):
    st.cache_data.clear() # Limpa o cache para for√ßar a recarga dos dados

# Carrega os dados mais recentes
df_features = load_data()

# --- Vis√£o Geral (Home Page) ---
st.markdown("<br>", unsafe_allow_html=True)
st.header("Vis√£o Geral do Status das M√°quinas")

# Verifica se h√° dados para exibir
if df_features.empty:
    st.warning("‚ö†Ô∏è Nenhum dado dispon√≠vel no momento. Tente atualizar os dados.")
else:
    # Classifica as m√°quinas por status
    critical_machines = []
    alert_machines = []
    normal_machines = []
    
    for _, row in df_features.iterrows():
        machine_id = row['machine_id']
        vib_media = row['vib_media_5h']
        temp_max = row['temp_max_24h']
        
        # Define status da vibra√ß√£o
        if vib_media > 4.5:
            vib_color = "red"
            vib_status = "Cr√≠tico"
        elif vib_media > 3.5:
            vib_color = "orange"
            vib_status = "Aten√ß√£o"
        else:
            vib_color = "green"
            vib_status = "Normal"
        
        # Define status da temperatura
        if temp_max > 90:
            temp_color = "red"
            temp_status = "Alta"
        elif temp_max > 80:
            temp_color = "orange"
            temp_status = "Moderada"
        else:
            temp_color = "green"
            temp_status = "Normal"
        
        # Determina status geral da m√°quina
        if vib_color == "red" or temp_color == "red":
            overall_status = "CR√çTICO"
            critical_machines.append((machine_id, row, vib_media, temp_max, vib_status, temp_status))
        elif vib_color == "orange" or temp_color == "orange":
            overall_status = "ATEN√á√ÉO"
            alert_machines.append((machine_id, row, vib_media, temp_max, vib_status, temp_status))
        else:
            overall_status = "NORMAL"
            normal_machines.append((machine_id, row, vib_media, temp_max, vib_status, temp_status))
    
    # Exibe resumo de status
    col_summary1, col_summary2, col_summary3 = st.columns(3)
    
    with col_summary1:
        st.metric(
            label="üî¥ M√°quinas Cr√≠ticas",
            value=len(critical_machines),
            delta="Requer a√ß√£o imediata" if len(critical_machines) > 0 else "Nenhuma"
        )
    
    with col_summary2:
        st.metric(
            label="üü° M√°quinas em Alerta",
            value=len(alert_machines),
            delta="Monitorar de perto" if len(alert_machines) > 0 else "Nenhuma"
        )
    
    with col_summary3:
        st.metric(
            label="üü¢ M√°quinas Normais",
            value=len(normal_machines),
            delta="Funcionando bem"
        )
    
    # Adiciona espa√ßamento entre resumo e m√°quinas com problemas
    st.markdown("<br>", unsafe_allow_html=True)
    
    # Exibe apenas m√°quinas com problemas (cr√≠ticas e em alerta)
    machines_with_issues = critical_machines + alert_machines
    
    if machines_with_issues:
        st.subheader("üö® M√°quinas que Requerem Aten√ß√£o")
        
        # Define as colunas para os cart√µes (m√°ximo 5 colunas)
        num_issue_machines = len(machines_with_issues)
        columns = st.columns(min(num_issue_machines, 5))
        
        # Itera sobre m√°quinas com problemas
        for i, (machine_id, row, vib_media, temp_max, vib_status, temp_status) in enumerate(machines_with_issues):
            # Determina se √© cr√≠tico ou alerta
            is_critical = vib_media > 4.5 or temp_max > 90
            
            # Cria o cart√£o dentro de uma coluna
            col_index = i % len(columns)
            with columns[col_index]:
                # Container para o cart√£o da m√°quina
                with st.container():
                    if is_critical:
                        st.markdown(f"### üî¥ {machine_id}")
                    else:
                        st.markdown(f"### üü° {machine_id}")
                    
                    # M√©tricas lado a lado
                    col_vib, col_temp = st.columns(2)
                    
                    with col_vib:
                        # Determina se a vibra√ß√£o est√° fora do padr√£o
                        vib_out_of_range = vib_media > 3.5
                        vib_label = "‚ö†Ô∏è Vibra√ß√£o" if vib_out_of_range else "Vibra√ß√£o"
                        
                        st.metric(
                            label=vib_label, 
                            value=vib_media,
                            delta=vib_status,
                            delta_color="off"
                        )
                    
                    with col_temp:
                        # Determina se a temperatura est√° fora do padr√£o
                        temp_out_of_range = temp_max > 80
                        temp_label = "‚ö†Ô∏è Temperatura" if temp_out_of_range else "Temperatura"
                        
                        st.metric(
                            label=temp_label, 
                            value=temp_max,
                            delta=temp_status,
                            delta_color="off"
                        )
                    
                    # Status geral da m√°quina
                    if is_critical:
                        overall_status = "CR√çTICO"
                        overall_color = "red"
                    else:
                        overall_status = "ATEN√á√ÉO"
                        overall_color = "orange"
                    
                    # Aplica cor ao texto do status
                    st.markdown(f"**Status Geral:** <span style='color: {overall_color}; font-weight: bold;'>{overall_status}</span>", unsafe_allow_html=True)
                    
                    # Aplica o CSS para colorir os cart√µes
                    vib_color = "red" if vib_media > 4.5 else "orange"
                    st.markdown(f"""
                    <style>
                    .stMetric[data-testid='stMetric']:nth-child({i+1}) .st-ae {{
                        color: {vib_color};
                    }}
                    </style>
                    """, unsafe_allow_html=True)
    else:
        st.success("üéâ Todas as m√°quinas est√£o funcionando normalmente!")

# Adiciona espa√ßamento entre se√ß√µes
st.markdown("---")
st.markdown("<br>", unsafe_allow_html=True)

# --- Gr√°ficos Comparativos ---
st.header("üìä An√°lise Comparativa")

# Gr√°ficos de barras para compara√ß√£o r√°pida (apenas m√°quinas com problemas)
if not df_features.empty:
    # Filtra m√°quinas com vibra√ß√£o fora do padr√£o
    vib_problem_machines = df_features[df_features['vib_media_5h'] > 3.5].copy()
    
    # Filtra m√°quinas com temperatura fora do padr√£o
    temp_problem_machines = df_features[df_features['temp_max_24h'] > 80].copy()
    
    col_chart1, col_chart2 = st.columns(2)
    
    with col_chart1:
        if not vib_problem_machines.empty:
            st.subheader("‚ö†Ô∏è Vibra√ß√£o Fora do Padr√£o (M√©dia das √öltimas 5h)")
            
            # Cria DataFrame com cores baseadas no status
            vib_chart_data = vib_problem_machines[['machine_id', 'vib_media_5h']].copy()
            vib_chart_data['Status'] = vib_chart_data['vib_media_5h'].apply(
                lambda x: 'Cr√≠tico' if x > 4.5 else 'Aten√ß√£o'
            )
            
            # Cria gr√°fico de barras com cores usando Plotly
            fig_vib = px.bar(
                vib_chart_data, 
                x='machine_id', 
                y='vib_media_5h',
                color='Status',
                color_discrete_map={'Cr√≠tico': '#FF0000', 'Aten√ß√£o': '#FFA500'},
                title="Vibra√ß√£o por M√°quina",
                labels={'vib_media_5h': 'Vibra√ß√£o (m/s¬≤)', 'machine_id': 'M√°quina'}
            )
            
            fig_vib.update_layout(
                showlegend=True,
                height=400,
                xaxis_title="M√°quina",
                yaxis_title="Vibra√ß√£o (m/s¬≤)"
            )
            
            st.plotly_chart(fig_vib, use_container_width=True)
            
            # Adiciona legenda de cores
            st.markdown("""
            <div style='margin-top: 10px;'>
                <span style='color: red; font-weight: bold;'>‚óè</span> Cr√≠tico (>4.5 m/s¬≤) &nbsp;&nbsp;
                <span style='color: orange; font-weight: bold;'>‚óè</span> Aten√ß√£o (3.5-4.5 m/s¬≤)
            </div>
            """, unsafe_allow_html=True)
        else:
            st.subheader("‚úÖ Vibra√ß√£o - Todas Normais")
            st.success("Todas as m√°quinas est√£o com vibra√ß√£o dentro do padr√£o normal.")
    
    with col_chart2:
        if not temp_problem_machines.empty:
            st.subheader("‚ö†Ô∏è Temperatura Fora do Padr√£o (M√°xima das √öltimas 24h)")
            
            # Cria DataFrame com cores baseadas no status
            temp_chart_data = temp_problem_machines[['machine_id', 'temp_max_24h']].copy()
            temp_chart_data['Status'] = temp_chart_data['temp_max_24h'].apply(
                lambda x: 'Alta' if x > 90 else 'Moderada'
            )
            
            # Cria gr√°fico de barras com cores usando Plotly
            fig_temp = px.bar(
                temp_chart_data, 
                x='machine_id', 
                y='temp_max_24h',
                color='Status',
                color_discrete_map={'Alta': '#FF0000', 'Moderada': '#FFA500'},
                title="Temperatura por M√°quina",
                labels={'temp_max_24h': 'Temperatura (¬∞C)', 'machine_id': 'M√°quina'}
            )
            
            fig_temp.update_layout(
                showlegend=True,
                height=400,
                xaxis_title="M√°quina",
                yaxis_title="Temperatura (¬∞C)"
            )
            
            st.plotly_chart(fig_temp, use_container_width=True)
            
            # Adiciona legenda de cores
            st.markdown("""
            <div style='margin-top: 10px;'>
                <span style='color: red; font-weight: bold;'>‚óè</span> Alta (>90¬∞C) &nbsp;&nbsp;
                <span style='color: orange; font-weight: bold;'>‚óè</span> Moderada (80-90¬∞C)
            </div>
            """, unsafe_allow_html=True)
        else:
            st.subheader("‚úÖ Temperatura - Todas Normais")
            st.success("Todas as m√°quinas est√£o com temperatura dentro do padr√£o normal.")
else:
    st.info("üìä Gr√°ficos n√£o dispon√≠veis - nenhum dado para exibir.")

# Adiciona espa√ßamento entre se√ß√µes
st.markdown("<br>", unsafe_allow_html=True)
st.markdown("---")
st.markdown("<br>", unsafe_allow_html=True)

# --- Vis√£o Detalhada e Previs√£o (Por M√°quina) ---
st.header("An√°lise Detalhada e Previs√£o de Falha")

# Seletor para escolher a m√°quina (inclui todas as m√°quinas)
if not df_features.empty:
    # Cria lista de m√°quinas com status para o seletor
    machine_options = []
    for _, row in df_features.iterrows():
        machine_id = row['machine_id']
        vib_media = row['vib_media_5h']
        temp_max = row['temp_max_24h']
        
        # Determina status para exibi√ß√£o no seletor
        if vib_media > 4.5 or temp_max > 90:
            status_icon = "üî¥"
            status_text = "CR√çTICO"
        elif vib_media > 3.5 or temp_max > 80:
            status_icon = "üü°"
            status_text = "ATEN√á√ÉO"
        else:
            status_icon = "üü¢"
            status_text = "NORMAL"
        
        machine_options.append(f"{status_icon} {machine_id} ({status_text})")
    
    selected_machine_display = st.selectbox(
        "Selecione uma m√°quina para an√°lise detalhada:",
        machine_options
    )
    
    # Extrai o ID da m√°quina da sele√ß√£o
    selected_machine = selected_machine_display.split(" ")[1]  # Remove emoji e status
    
    # Filtra os dados para a m√°quina selecionada
    machine_details = df_features[df_features['machine_id'] == selected_machine].iloc[0]
else:
    st.warning("‚ö†Ô∏è Nenhuma m√°quina dispon√≠vel para an√°lise detalhada.")
    selected_machine = None
    machine_details = None

# Exibe os detalhes da m√°quina em duas colunas
if machine_details is not None:
    col1, col2 = st.columns(2)
    
    with col1:
        st.subheader("Medidores Atuais")
        
        # Vibra√ß√£o com normaliza√ß√£o mais inteligente
        vib_value = machine_details['vib_media_5h']
        vib_progress = min(vib_value / 5.0, 1.0)  # Limita a 100%
        
        # Status da vibra√ß√£o
        if vib_value > 4.5:
            vib_status = "üî¥ Cr√≠tico"
            vib_out_of_range = True
        elif vib_value > 3.5:
            vib_status = "üü° Aten√ß√£o"
            vib_out_of_range = True
        else:
            vib_status = "üü¢ Normal"
            vib_out_of_range = False
        
        # Destaca se a vibra√ß√£o est√° fora do padr√£o
        if vib_out_of_range:
            st.markdown(f"**‚ö†Ô∏è Vibra√ß√£o (m√©dia 5h):** <span style='color: red; font-weight: bold;'>{vib_value} m/s¬≤</span> - {vib_status}", unsafe_allow_html=True)
        else:
            st.write(f"**Vibra√ß√£o (m√©dia 5h):** {vib_value} m/s¬≤ - {vib_status}")
        
        st.progress(vib_progress)
        
        # Temperatura com normaliza√ß√£o mais inteligente
        temp_value = machine_details['temp_max_24h']
        temp_progress = min(temp_value / 100.0, 1.0)  # Limita a 100%
        
        # Status da temperatura
        if temp_value > 90:
            temp_status = "üî¥ Alta"
            temp_out_of_range = True
        elif temp_value > 80:
            temp_status = "üü° Moderada"
            temp_out_of_range = True
        else:
            temp_status = "üü¢ Normal"
            temp_out_of_range = False
        
        # Destaca se a temperatura est√° fora do padr√£o
        if temp_out_of_range:
            st.markdown(f"**‚ö†Ô∏è Temperatura (m√°x 24h):** <span style='color: red; font-weight: bold;'>{temp_value} ¬∞C</span> - {temp_status}", unsafe_allow_html=True)
        else:
            st.write(f"**Temperatura (m√°x 24h):** {temp_value} ¬∞C - {temp_status}")
        
        st.progress(temp_progress)
        
        # Status geral da m√°quina
        if vib_value > 4.5 or temp_value > 90:
            overall_status = "CR√çTICO"
            overall_color = "red"
        elif vib_value > 3.5 or temp_value > 80:
            overall_status = "ATEN√á√ÉO"
            overall_color = "orange"
        else:
            overall_status = "NORMAL"
            overall_color = "green"
            
        # Aplica cor ao texto do status
        st.markdown(f"**Status Geral da M√°quina:** <span style='color: {overall_color}; font-weight: bold;'>{overall_status}</span>", unsafe_allow_html=True)
        
        try:
            timestamp = pd.to_datetime(machine_details['timestamp_processamento']).strftime('%d/%m/%Y %H:%M:%S')
            st.info(f"Dados atualizados em: {timestamp}")
        except Exception as e:
            st.warning(f"Erro ao processar timestamp: {e}")
    
    
    with col2:
        st.subheader("Executar Previs√£o de Falha")
        st.write("Clique no bot√£o abaixo para usar o modelo de ML (simulado) e obter uma previs√£o de falha com base nos dados atuais.")
    
        if st.button("Executar Previs√£o Agora", key=f"predict_{selected_machine}"):
            try:
                # Pega as features da m√°quina selecionada
                features_for_prediction = machine_details.to_dict()
                
                # Chama a fun√ß√£o de predi√ß√£o mockada
                with st.spinner("Executando o modelo..."):
                    prediction_result = get_mock_prediction(features_for_prediction)
                
                # Exibe o resultado da predi√ß√£o
                st.subheader("Resultado da Previs√£o")
                
                prob = prediction_result['probability']
                status = prediction_result['alert_status']
                
                if status == "CR√çTICO":
                    st.error(f"**Status:** {status}")
                elif status == "ALERTA":
                    st.warning(f"**Status:** {status}")
                else:
                    st.success(f"**Status:** {status}")
    
                st.write(f"**Probabilidade de Falha nas pr√≥ximas 24h:** {prob:.0%}")
                
            except Exception as e:
                st.error(f"Erro ao executar previs√£o: {e}")
else:
    st.info("‚ÑπÔ∏è Selecione uma m√°quina para ver os detalhes e executar previs√µes.")

